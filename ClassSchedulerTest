/**
 * Created by e18441 on 11/22/14.
 * (1,5) (1,5) (1,5) (1,3) (1,3) (3,4) (5,6)
 * greedy solutions will have 1,3,5
 * but 3,5 is the real solution
 */

import junit.framework.Assert;
import org.junit.Test;

import java.util.*;

public class ClassSchedulerTest {

    private com.cme.ClassScheduler scheduler = new com.cme.ClassScheduler();

    @Test
    public void testCase1() {
        Set<Integer> set1 = new HashSet<>();
        set1.addAll(Arrays.asList(1, 2, 5));

        Set<Integer> set2 = new HashSet<>();
        set2.addAll(Arrays.asList(2, 3, 7));

        Set<Integer> set3 = new HashSet<>();
        set3.addAll(Arrays.asList(5, 7, 9));

        List<Set<Integer>> employeeAvailability = new LinkedList<>();
        employeeAvailability.addAll(Arrays.asList(set1, set2, set3));

        Set<Integer> results = scheduler
                .findValidTrainingDays(employeeAvailability);

        Set<Integer> expectation = new HashSet<>();
        expectation.addAll(Arrays.asList(1, 7));

        verify(expectation, results);

    }

    @Test
    public void testCase2() {
        Set<Integer> set1 = new HashSet<>();
        set1.addAll(Arrays.asList(3, 12, 15));

        Set<Integer> set2 = new HashSet<>();
        set2.addAll(Arrays.asList(1, 2, 9));

        Set<Integer> set3 = new HashSet<>();
        set3.addAll(Arrays.asList(4, 6));

        List<Set<Integer>> employeeAvailability = new LinkedList<>();
        employeeAvailability.addAll(Arrays.asList(set1, set2, set3));

        Set<Integer> results = scheduler
                .findValidTrainingDays(employeeAvailability);

        Set<Integer> expectation = new HashSet<>();
        expectation.addAll(Arrays.asList(1, 3, 4));

        verify(expectation, results);
    }

    @Test
    public void testCase3() {
        Set<Integer> set1 = new HashSet<>();
        set1.addAll(Arrays.asList(1, 2, 3));

        Set<Integer> set2 = new HashSet<>();
        set2.addAll(Arrays.asList(2, 3, 4));

        Set<Integer> set3 = new HashSet<>();
        set3.addAll(Arrays.asList(3, 4, 5));

        Set<Integer> set4 = new HashSet<>();
        set4.addAll(Arrays.asList(5, 9, 10));

        Set<Integer> set5 = new HashSet<>();
        set5.addAll(Arrays.asList(9, 11, 12));

        List<Set<Integer>> employeeAvailability = new LinkedList<>();
        employeeAvailability.addAll(Arrays.asList(set1, set2, set3, set4, set5));

        Set<Integer> results = scheduler
                .findValidTrainingDays(employeeAvailability);

        Set<Integer> expectation = new HashSet<>();
        expectation.addAll(Arrays.asList(3, 9));

        verify(expectation, results);
    }

    @Test
    public void testCase4() {
        Set<Integer> set1 = new HashSet<>();
        set1.addAll(Arrays.asList(1, 5));

        Set<Integer> set2 = new HashSet<>();
        set2.addAll(Arrays.asList(1, 5));

        Set<Integer> set3 = new HashSet<>();
        set3.addAll(Arrays.asList(1, 5));

        Set<Integer> set4 = new HashSet<>();
        set4.addAll(Arrays.asList(1, 3));

        Set<Integer> set5 = new HashSet<>();
        set5.addAll(Arrays.asList(1, 3));

        Set<Integer> set6 = new HashSet<>();
        set6.addAll(Arrays.asList(3, 4));

        Set<Integer> set7 = new HashSet<>();
        set7.addAll(Arrays.asList(5, 6));

        List<Set<Integer>> employeeAvailability = new LinkedList<>();
        employeeAvailability.addAll(Arrays.asList(set1, set2, set3, set4, set5,
                set6, set7));

        Set<Integer> results = scheduler
                .findValidTrainingDays(employeeAvailability);

        Set<Integer> expectation = new HashSet<>();
        expectation.addAll(Arrays.asList(3, 5));

        verify(expectation, results);
    }

    private void verify(Set<Integer> expectation, Set<Integer> results) {
        boolean result = true;
        if (expectation == null || results == null) {
            result = false;
        } else if (expectation.size() != results.size()) {
            result = false;
        } else {
            for (Integer i : expectation) {
                if (!results.contains(i)) {
                    result = false;
                }
            }
        }

        Assert.assertTrue("Results do not match expectations. Your results: " + results + " Expectation: " + expectation, result);
    }
}


